import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class BinarySearchLinkedList {

    static class Node {
        String data;
        Node next;

        Node(String data) {
            this.data = data;
            next = null;
        }
    }

    static class LinkedList {
        Node head;

        LinkedList() {
            head = null;
        }

        void insert(String data) {
            Node newNode = new Node(data);
            if (head == null) {
                head = newNode;
            } else {
                Node current = head;
                while (current.next != null) {
                    current = current.next;
                }
                current.next = newNode;
            }
        }

        void display() {
            Node current = head;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }

        int size() {
            int size = 0;
            Node current = head;
            while (current != null) {
                size++;
                current = current.next;
            }
            return size;
        }

        String get(int index) {
            if (index < 0 || index >= size()) {
                throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size());
            }
            Node current = head;
            for (int i = 0; i < index; i++) {
                current = current.next;
            }
            return current.data;
        }
    }

    public static void main(String[] args) {
        String fileName = "C://words.txt";
        LinkedList wordList = new LinkedList();

        try {
        	Files.lines(Paths.get(fileName))
            .flatMap((String line) -> Arrays.stream(line.split("\\s+")))
            .forEach(word -> wordList.insert(word));

            // Print linked list elements (optional)
            // wordList.display();

            Scanner sc = new Scanner(System.in);
            System.out.print("Enter the word to search (Binary Link Search): ");
            String searchWord = sc.nextLine().toLowerCase();

            long start = System.nanoTime();
            int index = binarySearchLinkedList(wordList, searchWord);
            long end = System.nanoTime();
            long nanos = end - start;
            System.out.println("Time taken: " + nanos + " nanoseconds");

            if (index != -1) {
                System.out.println("Word found at index: " + index);
            } else {
                System.out.println("Word not found");
            }

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public static int binarySearchLinkedList(LinkedList list, String target) {
        int left = 0;
        int right = list.size() - 1; // Calculate size once

        // Early termination checks
        if (target.compareTo(list.head.data) < 0 || target.compareTo(list.get(right)) > 0) {
            return -1;
        }

        while (left <= right) {
            int mid = left + (right - left) / 2;
            String midValue = list.get(mid);

            int comparisonResult = target.compareTo(midValue);

            if (comparisonResult == 0) {
                return mid;
            } else if (comparisonResult < 0) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return -1; // Not found
    }
}
